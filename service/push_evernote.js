// Generated by CoffeeScript 1.8.0
(function() {
  var Devices, Evernote, PushEvernote, async, crypto, deviceArr, makeNote, noteStore, request;

  noteStore = require('./noteStore');

  Devices = require('../models/devices');

  makeNote = require('./makeNote');

  async = require('async');

  request = require('request');

  Evernote = require('evernote').Evernote;

  crypto = require('crypto');

  PushEvernote = (function() {
    function PushEvernote(deviceInfoArr) {
      this.deviceInfoArr = deviceInfoArr;
      this.resourceArr = [];
    }

    PushEvernote.prototype.pushNote = function(cb) {
      var self;
      self = this;
      return async.waterfall([
        function(callback) {
          return self.getImgRes(function(err) {
            if (err) {
              return console.log(err);
            }
            return callback();
          });
        }, function(callback) {
          var html;
          html = self.genPushContent();
          return makeNote(noteStore, 'hi', html, {
            resources: self.resourceArr
          }, function(err, note) {
            if (err) {
              return console.log(err);
            }
            return console.log(note);
          });
        }
      ]);
    };

    PushEvernote.prototype.genPushContent = function() {
      var d, hexHash, html, imgTag, md5, self, _i, _len, _ref;
      self = this;
      html = "";
      _ref = self.deviceInfoArr;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        md5 = crypto.createHash('md5');
        md5.update(d.resource.image);
        hexHash = md5.digest('hex');
        imgTag = "<en-media type='" + d.resource.mime + "' hash='" + hexHash + "' />";
        html += "<h3>经纬度:" + d.long + ", " + d.lat + "地址:" + d.formatted_address + "</h3> ";
        html += imgTag + "<hr/><br/>";
        self.resourceArr.push(d.resource);
      }
      console.log(html);
      return html;
    };

    PushEvernote.prototype.getImgRes = function(cb) {
      var self;
      self = this;
      return async.eachSeries(self.deviceInfoArr, function(item, callback) {
        return self.readImgRes(item.img_src, function(err, res) {
          if (err) {
            return console.log(err);
          }
          item.resource = res;
          return callback();
        });
      }, function() {
        return cb();
      });
    };

    PushEvernote.prototype.readImgRes = function(imgUrl, cb) {
      var op, self;
      self = this;
      op = self.reqOp(imgUrl);
      op.encoding = 'binary';
      return async.auto({
        readImg: function(callback) {
          return request.get(op, function(err, res, body) {
            var mimeType;
            if (err) {
              return cb(err);
            }
            mimeType = res.headers['content-type'];
            mimeType = mimeType.split(';')[0];
            return callback(null, body, mimeType);
          });
        },
        enImg: [
          'readImg', function(callback, result) {
            var data, hash, image, mimeType, resource;
            mimeType = result.readImg[1];
            image = new Buffer(result.readImg[0], 'binary');
            hash = image.toString('base64');
            data = new Evernote.Data();
            data.size = image.length;
            data.bodyHash = hash;
            data.body = image;
            resource = new Evernote.Resource();
            resource.mime = mimeType;
            resource.data = data;
            resource.image = image;
            return cb(null, resource);
          }
        ]
      });
    };

    PushEvernote.prototype.reqOp = function(getUrl) {
      var options;
      options = {
        url: getUrl,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.90 Safari/537.36'
        }
      };
      return options;
    };

    return PushEvernote;

  })();

  deviceArr = Devices.where({
    img_src: {
      $neq: ''
    }
  }).find(function(err, rows) {
    var p;
    if (err) {
      return console.log(err);
    }
    p = new PushEvernote(rows);
    return p.pushNote();
  });

}).call(this);

//# sourceMappingURL=push_evernote.js.map
